{"version":3,"sources":["services/transactionService.js","components/transaction-log/transactionLog.js","actions/index.js","components/pages/home-page.js","components/app/index.js","components/app/app.js","reducers/index.js","store.js","index.js"],"names":["fetchTransactions","a","fetch","res","json","body","connect","state","items","transactions","dispatch","getTransactions","type","result","payload","useEffect","className","Accordion","defaultActiveKey","map","item","index","id","status","amount","balance","message","effectiveDate","isCredit","rowstyle","color","amountStyle","Card","key","Toggle","as","Header","eventKey","Body","Title","Subtitle","style","Collapse","Text","HomePage","App","role","path","component","exact","initialState","loading","error","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"iTAAaA,EAAiB,uCAAG,8BAAAC,EAAA,sEACXC,MAAM,mBADK,cACvBC,EADuB,gBAEVA,EAAIC,OAFM,cAEvBC,EAFuB,yBAGtBA,GAHsB,2CAAH,qD,gBC4DfC,G,MAAAA,aARS,SAAAC,GAAK,MAAK,CAChCC,MAAOD,EAAME,iBAGY,SAAAC,GAAQ,MAAK,CACtCC,gBAAiB,kBAAMD,EC1CD,uCAAM,WAAMA,GAAN,eAAAT,EAAA,6DAC5BS,EAbO,CACLE,KAAM,+BAWoB,SAEPZ,IAFO,OAEtBa,EAFsB,OAG5BH,EATO,CACLE,KAAM,6BACNE,QAO0BD,IAHA,2CAAN,2DD6CTP,EAtDQ,SAAC,GAAgC,IAA9BE,EAA6B,EAA7BA,MAAOG,EAAsB,EAAtBA,gBAE/BI,qBAAU,WACRJ,MACC,IA+BH,OACE,yBAAKK,UAAU,uBACb,+CAEA,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KACzBV,EAAMW,KAlCK,SAACC,EAAMC,GAAW,IAC1BC,EAA8DF,EAA9DE,GAAIV,EAA0DQ,EAA1DR,KAAMW,EAAoDH,EAApDG,OAAQC,EAA4CJ,EAA5CI,OAAQC,EAAoCL,EAApCK,QAASC,EAA2BN,EAA3BM,QAASC,EAAkBP,EAAlBO,cAE9CC,EAAoB,WAAThB,EACXiB,EAAW,CAAEC,MAAOF,EAAW,QAAU,OACzCG,EAAcH,EAAW,IAAM,IAErC,OACE,kBAACI,EAAA,EAAD,CAAMC,IAAKX,GACT,kBAACL,EAAA,EAAUiB,OAAX,CAAkBC,GAAIH,IAAKI,OAAQC,SAAUhB,EAAQ,GACnD,kBAACW,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAa3B,GACb,kBAACoB,EAAA,EAAKQ,SAAN,CAAexB,UAAU,OAAOyB,MAAOZ,GAAWE,EAAlD,KAAiEP,KAGrE,kBAACP,EAAA,EAAUyB,SAAX,CAAoBL,SAAUhB,EAAQ,GACpC,kBAACW,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAahB,GACb,kBAACS,EAAA,EAAKQ,SAAN,CAAexB,UAAU,mBAAzB,aAAsDS,GACtD,kBAACO,EAAA,EAAKQ,SAAN,CAAexB,UAAU,mBAAmBW,GAC5C,kBAACK,EAAA,EAAKW,KAAN,KACGjB,eEtBAkB,EARE,WACf,OACE,6BACE,kBAAC,EAAD,QCJSC,G,MCGH,WACV,OACE,0BAAMC,KAAK,OAAO9B,UAAU,aAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE+B,KAAK,IACLC,UAAWJ,EACXK,OAAK,Q,ilBCXf,IAAMC,EAAe,CACnBzC,aAAc,GACd0C,SAAS,EACTC,MAAO,MAmCMC,EAhCC,WAAmC,IAAlC9C,EAAiC,uDAAzB2C,EAAcI,EAAW,uCAEhD,OAAQA,EAAO1C,MACb,IAAK,6BACH,OAAO,EAAP,GACKL,EADL,CAEEE,aAAc,GACd0C,SAAS,EACTC,MAAO,OAGX,IAAK,6BACH,OAAO,EAAP,GACK7C,EADL,CAEEE,aAAc6C,EAAOxC,QACrBqC,SAAS,EACTC,MAAO,OAGX,IAAK,6BACH,OAAO,EAAP,GACK7C,EADL,CAEEE,aAAc,GACd0C,SAAS,EACTC,MAAOE,EAAOxC,UAGlB,QACE,OAAOP,IC9BEgD,EAFDC,YAAYH,EAASI,YAAgBC,MCInDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.6950789c.chunk.js","sourcesContent":["export const fetchTransactions = async () => {\r\n    const res = await fetch('api/transaction');\r\n    const body = await res.json();\r\n    return body;\r\n}","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getTransactions } from '../../actions';\r\nimport { Accordion, Card } from 'react-bootstrap';\r\nimport './transactionLog.css';\r\n\r\nconst TransactionLog = ({ items, getTransactions }) => {\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n  }, []);\r\n\r\n  const renderRow = (item, index) => {\r\n    const { id, type, status, amount, balance, message, effectiveDate } = item;\r\n\r\n    const isCredit = type === 'Credit';\r\n    const rowstyle = { color: isCredit ? 'green' : 'red' };\r\n    const amountStyle = isCredit ? '+' : '-';\r\n\r\n    return (\r\n      <Card key={id}>\r\n        <Accordion.Toggle as={Card.Header} eventKey={index + 1}>\r\n          <Card.Body>\r\n            <Card.Title>{type}</Card.Title>\r\n            <Card.Subtitle className=\"mb-2\" style={rowstyle}>{amountStyle} ${amount}</Card.Subtitle>\r\n          </Card.Body>\r\n        </Accordion.Toggle>\r\n        <Accordion.Collapse eventKey={index + 1}>\r\n          <Card.Body>\r\n            <Card.Title>{status}</Card.Title>\r\n            <Card.Subtitle className=\"mb-2 text-muted\">Balance: ${balance}</Card.Subtitle>\r\n            <Card.Subtitle className=\"mb-2 text-muted\">{effectiveDate}</Card.Subtitle>\r\n            <Card.Text>\r\n              {message}\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"shopping-cart-table\">\r\n      <h2>Transaction Log</h2>\r\n\r\n      <Accordion defaultActiveKey=\"0\">\r\n        {items.map(renderRow)}\r\n      </Accordion>\r\n    </div >\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.transactions\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  getTransactions: () => dispatch(getTransactions())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionLog);\r\n","import { fetchTransactions } from '../services/transactionService';\r\n\r\nconst transactionsRequested = () => {\r\n  return {\r\n    type: 'FETCH_TRANSACTIONS_REQUEST'\r\n  }\r\n};\r\n\r\nconst transactionsLoaded = (transactions) => {\r\n  return {\r\n    type: 'FETCH_TRANSACTIONS_SUCCESS',\r\n    payload: transactions\r\n  };\r\n};\r\n\r\nconst getTransactions = () => async dispatch => {\r\n  dispatch(transactionsRequested());\r\n  const result = await fetchTransactions();\r\n  dispatch(transactionsLoaded(result));\r\n};\r\n\r\nexport {\r\n  getTransactions\r\n};","import React from 'react';\r\nimport TransactionLog from '../transaction-log/transactionLog';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div>\r\n      <TransactionLog />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { HomePage } from '../pages';\r\nimport './app.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <main role=\"main\" className=\"container\">\r\n      <Switch>\r\n        <Route\r\n          path=\"/\"\r\n          component={HomePage}\r\n          exact />\r\n      </Switch>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","\r\nconst initialState = {\r\n  transactions: [],\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case 'FETCH_TRANSACTIONS_REQUEST':\r\n      return {\r\n        ...state,\r\n        transactions: [],\r\n        loading: true,\r\n        error: null\r\n      };\r\n\r\n    case 'FETCH_TRANSACTIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        transactions: action.payload,\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    case 'FETCH_TRANSACTIONS_FAILURE':\r\n      return {\r\n        ...state,\r\n        transactions: [],\r\n        loading: false,\r\n        error: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducers';\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './components/app';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}